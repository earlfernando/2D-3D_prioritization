#Librariers to be imported
import  os
import numpy as np
import sqlite3
import sys

#nvm file location
nvm_file_location = "/home/earl/Thesis/GreatCourt/reconstruction.nvm"
image_file_text_location ="/home/earl/Thesis/GreatCourt/image_imput1.txt"
dir_for_counting= "/home/earl/Thesis/GreatCourt/"
database_locatiom = "/home/earl/Thesis/Separate_great_court/separate_seq.db"
camera_write_text_file_location = "/home/earl/Thesis/GreatCourt/camers_input_for_triangulate.txt"
image_write_text_file_location = "/home/earl/Thesis/GreatCourt/image_input_for_triangulate.txt"


#Methods
def image_dir_counting(dir,sequence,image_data):
    r = []
    file_count =0
    sequence = np.array(sequence)
    image_data = np.array(image_data)
    camera_id_array =[]
    sorted_sequence = []
    camera_id =0
    sorted_image_data =[]
    for root, dirs, files in os.walk(dir):
        for name in sorted(dirs):
            if name == 'videos':
                continue
            local_path =os.path.join(root, name)
            path, directories, images = next(os.walk(local_path))
            for image in sorted(images):
                camera_id +=1
                local_image_name = name+'/'+image
                image_index = np.where(sequence==local_image_name)
                if len(image_index)!=1:
                    print("error")
                sorted_image_data.append(image_data[image_index])
                camera_id_array.append(camera_id)
                sorted_sequence.append(local_image_name)
            file_count += len(images)
    return file_count, sorted_image_data,sorted_sequence,camera_id_array

def write_image_seqence(image_file_text, sequence_location, image_name,seqence):

    seqence_length = len(seqence)
    if sequence_location <= 10:
        image_start = 0
    else:
        image_start = sequence_location-10

    if sequence_location >= seqence_length-10:
        image_end = seqence_length
    else:
        image_end = sequence_location+10
    #writes the images before
    for i in range (image_start,sequence_location):
        local_string = image_name+' '+ seqence[i]+'\n'
        image_file_text.write(local_string)
    #writes the images after
    for i in range (sequence_location+1,image_end):
        local_string = image_name + ' ' + seqence[i] + '\n'
        image_file_text.write(local_string)

def convert_list_str_to_int(image_data):
    for number, data in enumerate(image_data):
        test_number = list(map(float, data))
        image_data[number] = test_number

    return  image_data

def split():
        seqence =[]
        image_data =[]
        with open(nvm_file_location,'r') as nvm_file:
            for line in nvm_file:
                if line.startswith("se"):
                    line = line.replace('.jpg','.png')
                    split_data =line.replace('\t', ' ').rstrip().split(' ')
                    seqence.append(split_data[0])
                    image_data.append(split_data[1:len(split_data)])
                    #seqence.append(split_data[0].replace('.jpg','.png'))
        with open(image_file_text_location,'w') as image_file_text :
            for sequence_location,image_name in enumerate(seqence):
                write_image_seqence(image_file_text, sequence_location, image_name,seqence)


        return seqence, convert_list_str_to_int(image_data)

def blob_to_array(blob, dtype, shape=(-1,)):
    IS_PYTHON3 = sys.version_info[0] >= 3
    if IS_PYTHON3:
        return np.fromstring(blob, dtype=dtype).reshape(*shape)
    else:
        return np.frombuffer(blob, dtype=dtype).reshape(*shape)


def array_to_blob(array):
    IS_PYTHON3 = sys.version_info[0] >= 3
    if IS_PYTHON3:
        return array.tostring()
    else:
        return np.getbuffer(array)




"""def database_change(sorted_image_data, sorted_sequence, camera_id_array,database_location):

    ### camera id sequence is faulty check get_details from camera, there is a order mismatch between the camera_id
    ### and image_id (see the database)
    database = sqlite3.connect(database_locatiom)
    cursor =database.cursor()
    params_storage =[]

    cursor.execute('''SELECT camera_id,params, prior_focal_length FROM cameras''')
    for row in cursor:
        # row[0] returns the first column in the query (name), row[1] returns email column.
        #print(str(row[2]),type(row[1]))
        params = blob_to_array(row[1], np.float64)
        params_storage.append(params)
        #print('{0} : {1} :{2}'.format(row[0], row[1],row[2]))


    for id in camera_id_array:
        local= sorted_image_data[id-1]
        focal_length = local[0][0]
        ####focal_length = '{0:f}'.format(focal_length)
        #distortion = local[0][len(local[0])-2]
        #local_params =params_storage[id-1]
        #camera_center_x = local[0][len(local[0]) - 4]
        #camera_center_y= local[0][len(local[0]) - 3]
        #params_to_update = np.array([focal_length, camera_center_x, camera_center_y, distortion])

        #params_to_update = np.array([focal_length, local_params[1],local_params[2],distortion])

        #blob = array_to_blob(params_to_update)
        cursor.execute('''UPDATE Cameras SET prior_focal_length = ? WHERE camera_id =?''', (focal_length, id))


    database.commit()
    database.close()"""


def get_details_from_database():

    database = sqlite3.connect(database_locatiom)
    cursor =database.cursor()

    cursor.execute('''SELECT image_id,camera_id,name FROM images''')

    with open(image_write_text_file_location,'w') as image_write:
            with open(camera_write_text_file_location,'w') as camera_write:
                for row in cursor:
                    print('{0} : {1} :{2}'.format(row[0], row[1],row[2]))
                    camera_write.write(str(row[1])+'\n')
                    image_write.write(str(row[2]
                                          )+' '+str(row[0])+'\n')
    database.close()

"""
def get_details_from_database(sorted_image_data, sorted_sequence, camera_id_array,database_location):
    database = sqlite3.connect(database_locatiom)
    cursor =database.cursor()
    camera_id_array =[]
    image_id_array=[]
    image_id_seq =[]

    cursor.execute('''SELECT image_id,camera_id,name FROM images''')
    for row in cursor:
        # row[0] returns the first column in the query (name), row[1] returns email column.

        camera_id_array.append(row[1])
        image_id_array.append(row[0])
        image_id_seq.append(row[2])
        print('{0} : {1} :{2}'.format(row[0], row[1],row[2]))


    with open(image_write_text_file_location,'w') as image_write:
            with open(camera_write_text_file_location,'w') as camera_write:
                for number,camera_id in enumerate(camera_id_array):
                    camera_write.write(str(camera_id)+'\n')
                    image_write.write(str(image_id_seq[number])+' '+str(image_id_array[number])+'\n')



    database.commit()
    database.close()
"""




#Main loop
sequence, image_data =split()
file_count, sorted_image_data, sorted_sequence, camera_id_array = image_dir_counting(dir_for_counting,
                                                                                     sequence,image_data)
#database_change(sorted_image_data,sorted_sequence,camera_id_array,database_locatiom)
get_details_from_database()
